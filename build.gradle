buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.6.0'
    }
}

def SNAPSHOT = '1.0-SNAPSHOT'
version = SNAPSHOT
if (project.hasProperty("xodusVersion")) {
    version = project.xodusVersion
}

def mavenPublishUrl = "http://repository.jetbrains.com/xodus"
if (project.hasProperty("mavenPublishUrl")) {
    mavenPublishUrl = project.mavenPublishUrl
}

def mavenPublishUsername = 'xodus'
if (project.hasProperty("mavenPublishUsername")) {
    mavenPublishUsername = project.mavenPublishUsername;
}

def mavenPublishPassword = 'pwd'
if (project.hasProperty("mavenPublishPassword")) {
    mavenPublishPassword = project.mavenPublishPassword;
}

subprojects {
    apply plugin: 'license'
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.6
    compileJava.options.encoding = 'UTF-8'
    version = rootProject.version

    license {
        header rootProject.file('license/copyright.ftl')
        strictCheck true
        ext.inceptionYear = 2010
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.owner = 'JetBrains s.r.o.'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    jar {
        manifest {
            attributes "Implementation-Title": "Gradle", "Implementation-Version": version
        }
    }

    test {
        minHeapSize = '1g'
        maxHeapSize = '1g'
        jvmArgs = ['-ea', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=2808']
        testLogging.showStandardStreams = true;
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from project.sourceSets.main.java
    }

    def projectName = rootProject.name + '-' + project.name;
    if (version == SNAPSHOT) {
        jar.archiveName = projectName + '.jar'
        javadocJar.archiveName = projectName + '-javadoc.jar'
        sourceJar.archiveName = projectName + '-sources.jar'
    } else {
        jar.archiveName = projectName + '-' + version + '.jar'
        javadocJar.archiveName = projectName + '-' + version + '-javadoc.jar'
        sourceJar.archiveName = projectName + '-' + version + '-sources.jar'
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourceJar
    }

    if (!(project.name in ['benchmarks', 'benchmarks-jmh', 'samples', 'sshd'])) {
        publishing {
            publications {
                xodus(MavenPublication) {
                    groupId 'org.jetbrains.xodus'
                    artifactId projectName
                    if (jar.enabled) {
                        artifact jar
                    }
                    artifact javadocJar
                    artifact sourceJar
                    pom.withXml {
                        asNode().children().last() + {
                            resolveStrategy = DELEGATE_FIRST
                            packaging 'jar'
                            name 'Xodus'
                            description 'Xodus is pure Java transactional schemaless embedded  database'
                            url 'http://jetbrains.github.io/xodus'
                            scm {
                                url 'https://github.com/JetBrains/xodus'
                                connection 'scm:git:https://github.com/JetBrains/xodus.git'
                                developerConnection 'scm:git:https://github.com/JetBrains/xodus.git'
                            }
                            licenses {
                                license {
                                    name 'The Apache Software License, Version 2.0'
                                    url 'http://www.apache.org/license/LICENSE-2.0.txt'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'JetBrains'
                                    name 'JetBrains Team'
                                    organization 'JetBrains s.r.o'
                                    organizationUrl 'http://www.jetbrains.com'
                                }
                            }
                        }
                    }
                }
            }
            repositories {
                maven {
                    url mavenPublishUrl
                    credentials {
                        username mavenPublishUsername
                        password mavenPublishPassword
                    }
                }
            }
        }
    }
}